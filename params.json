{"name":"jsftp","tagline":"jsftp is a sane and lightweight client implementation of the FTP protocol in JavaScript","body":"jsftp is a client FTP module for NodeJS that focuses on correctness, clarity and conciseness. It doesn't get in the middle of the user intentions.\r\n\r\njsftp gives the user access to all the raw commands of FTP in form of methods in the `Ftp` object. It also provides convenience methods for actions that require complex chains of commands (e.g. uploading and retrieving files).\r\n\r\nWhen commands succeed they always pass the response of the server to the callback in the form of an object that contains two properties: `code`, which is the response code of the FTP operation, and `text`, which is the complete text of the response.\r\n\r\nRaw (or native) commands are accessible in the form `Ftp.raw.desired_command(params, callback)`\r\n\r\nThus, an ftp command like `QUIT` will be called like:\r\n\r\n```javascript\r\nFtp.raw.quit(function(err, data) {\r\n    if (err)\r\n        throw err;\r\n\r\n    console.log(\"Bye!\");\r\n});\r\n```\r\n\r\nand a command like `MKD` (make directory) which accepts parameters, will look like this:\r\n\r\n```javascript\r\nFtp.raw.mkd(\"/new_dir\", function(err, data) {\r\n    if (err)\r\n        throw err;\r\n\r\n    console.log(data.text); // Print FTP response\r\n});\r\n```\r\n\r\n\r\nUsage examples\r\n--------------\r\n\r\n```javascript\r\n// Initialize some common variables\r\nvar user = \"johndoe\";\r\nvar pass = \"12345\";\r\n\r\nvar ftp = new Ftp({\r\n    host: \"myhost.com\",\r\n    port: 21, // The port defaults to 21, but let's include it anyway.\r\n});\r\n\r\n\r\n// First, we authenticate the user\r\nftp.auth(user, pass, function(err, res) {\r\n    if (err) throw err;\r\n\r\n    // Retrieve a file in the remote server. When the file has been retrieved,\r\n    // the callback will be called with `data` being the Buffer with the\r\n    // contents of the file.\r\n\r\n    // This is a convenience method that hides the actual complexity of setting\r\n    // up passive mode and retrieving files.\r\n\r\n    ftp.get(\"/folder/file.ext\", function(err, data) {\r\n        if (err) throw err;\r\n\r\n        // Do something with the buffer\r\n        doSomething(data);\r\n\r\n        // We can use raw FTP commands directly as well. In this case we use FTP\r\n        // 'QUIT' method, which accepts no parameters and returns the farewell\r\n        // message from the server\r\n        ftp.raw.quit(function(err, res) {\r\n            if (err) throw err;\r\n\r\n            console.log(\"FTP session finalized! See you soon!\");\r\n        });\r\n    });\r\n});\r\n\r\n// The following code assumes that you have authenticated the user, just like\r\n// I did in the code above.\r\n\r\n// Create a directory\r\nftp.raw.mkd(\"/example_dir\", function(err, data) {\r\n    if (err)\r\n        throw err;\r\n\r\n    console.log(data.text);\r\n});\r\n\r\n// Delete a directory\r\nftp.raw.rmd(\"/example_dir\", function(err, data) {\r\n    if (err)\r\n        throw err;\r\n\r\n    console.log(data.text);\r\n});\r\n```\r\n\r\nYou can find more usage examples in the unit tests for it. This documentation\r\nwill grow as jsftp evolves, I promise!\r\n\r\n\r\nAPI\r\n---\r\n\r\n### Properties\r\n\r\n#### Ftp.host\r\n\r\nHost name for the current FTP server.\r\n\r\n#### Ftp.port\r\n\r\nPort number for the current FTP server (defaults to 21).\r\n\r\n#### Ftp.socket\r\n\r\nNodeJS socket for the current FTP server.\r\n\r\n#### Ftp.dataConn\r\n\r\nNodeJS socket for the current passive connection, if any.\r\n\r\n#### Ftp.features\r\n\r\n`features` is an array of feature names for the current FTP server. It is\r\ngenerated when the user authenticates with the `auth` method.\r\n\r\n\r\n### Methods\r\n\r\n#### `Ftp.raw.FTP_COMMAND([params], callback)`\r\nAll the standard FTP commands are available under the `raw` namespace. These\r\ncommands might accept parameters or not, but they always accept a callback\r\nwith the signature `err, data`, in which `err` is the error response coming\r\nfrom the server (usually a 4xx or 5xx error code) and the data is an object\r\nthat contains two properties: `code` and `text`. `code` is an integer indicating\r\nthe response code of the response and `text` is the response stgring itself.\r\n\r\n#### `Ftp.auth(username, password, callback)`\r\nAuthenticates the user with the given username and password. If null or empty\r\nvalues are passed for those, `auth` will use anonymous credentials. `callback`\r\nwill be called with the response text in case of successful login or with an\r\nerror as a first parameter, in normal Node fashion.\r\n\r\n#### `Ftp.list(filePath, callback)`\r\nLists `filePath` contents using a passive connection.\r\n\r\n#### `Ftp.get(filePath, callback)`\r\nDownloads `filePath` from the server.\r\n\r\n#### `Ftp.put(filePath, buffer, callback)`\r\nUploads a file to `filePath`. It accepts a `buffer` parameter that will be\r\nwritten in the remote file.\r\n\r\n#### `Ftp.rename(from, to, callback)`\r\nRenames a file in the server. `from` and `to` are both filepaths.\r\n\r\n#### `Ftp.ls(filePath, callback)`\r\nLists information about files or directories and yields an array of file objects with parsed file properties to the callback. You should use this function instead of `stat` or `list` in case you need to do something with the individual files properties.\r\n\r\n#### `Ftp.keepAlive()`\r\nRefreshes the interval thats keep the server connection active. There is no\r\nneed to call this method since it is taken care internally\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n    npm install jsftp\r\n\r\nTests\r\n-----\r\n\r\nThe test script fires up by default the FTP server that comes with OSX. You\r\nwill have to put your OSX user credentials in `jsftp_test.js` if you want to\r\nrun it. If you are not on OSX, feel free to change the FTP host, port and\r\ncredentials to point to a remote server.\r\n\r\nTo run the tests in the command line:\r\n\r\n    node jsftp_test.js\r\n\r\nIf tests are failing it might be that your user doesn't have enough rights to\r\nrun the FTP service. In that case you should run the tests as `sudo`:\r\n\r\n    sudo node jsftp_test.js\r\n\r\nPlease note that running scripts as sudo is dangerous and you will grant the\r\nscript to do anything in your server. You should do it at your own risk.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE.\r\n\r\n","google":"UA-30988454-1","note":"Don't delete this file! It's used internally to help with page regeneration."}